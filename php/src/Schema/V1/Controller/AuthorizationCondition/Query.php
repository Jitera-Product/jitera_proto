<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: v1/payloads.proto

namespace Schema\V1\Controller\AuthorizationCondition;

use UnexpectedValueException;

/**
 * Protobuf type <code>schema.v1.Controller.AuthorizationCondition.Query</code>
 */
class Query
{
    /**
     * Generated from protobuf enum <code>EQUAL = 0;</code>
     */
    const EQUAL = 0;
    /**
     * Generated from protobuf enum <code>IS_NOT_EQUAL = 1;</code>
     */
    const IS_NOT_EQUAL = 1;
    /**
     * Generated from protobuf enum <code>GREATER_THAN = 2;</code>
     */
    const GREATER_THAN = 2;
    /**
     * Generated from protobuf enum <code>LESS_THAN = 3;</code>
     */
    const LESS_THAN = 3;
    /**
     * Generated from protobuf enum <code>GREATER_THAN_OR_EQUAL_TO = 4;</code>
     */
    const GREATER_THAN_OR_EQUAL_TO = 4;
    /**
     * Generated from protobuf enum <code>LESS_THAN_OR_EQUAL_TO = 5;</code>
     */
    const LESS_THAN_OR_EQUAL_TO = 5;

    private static $valueToName = [
        self::EQUAL => 'EQUAL',
        self::IS_NOT_EQUAL => 'IS_NOT_EQUAL',
        self::GREATER_THAN => 'GREATER_THAN',
        self::LESS_THAN => 'LESS_THAN',
        self::GREATER_THAN_OR_EQUAL_TO => 'GREATER_THAN_OR_EQUAL_TO',
        self::LESS_THAN_OR_EQUAL_TO => 'LESS_THAN_OR_EQUAL_TO',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Query::class, \Schema\V1\Controller_AuthorizationCondition_Query::class);

