<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: v1/payloads.proto

namespace Schema\V1\Table\Column;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>schema.v1.Table.Column.ColumnType</code>
 */
class ColumnType extends \Google\Protobuf\Internal\Message
{
    protected $types;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Schema\V1\Table\Column\IntegerType $integer_type
     *     @type \Schema\V1\Table\Column\StringType $string_type
     *     @type \Schema\V1\Table\Column\FloatType $float_type
     *     @type \Schema\V1\Table\Column\BooleanType $boolean_type
     *     @type \Schema\V1\Table\Column\DateType $date_type
     *     @type \Schema\V1\Table\Column\FileType $file_type
     *     @type \Schema\V1\Table\Column\EnumType $enum_type
     *     @type \Schema\V1\Table\Column\CounterCacheType $counter_cache_type
     *     @type \Schema\V1\Table\Column\IDType $id_type
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\V1\Payloads::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.IntegerType integer_type = 1;</code>
     * @return \Schema\V1\Table\Column\IntegerType|null
     */
    public function getIntegerType()
    {
        return $this->readOneof(1);
    }

    public function hasIntegerType()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.IntegerType integer_type = 1;</code>
     * @param \Schema\V1\Table\Column\IntegerType $var
     * @return $this
     */
    public function setIntegerType($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Column\IntegerType::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.StringType string_type = 2;</code>
     * @return \Schema\V1\Table\Column\StringType|null
     */
    public function getStringType()
    {
        return $this->readOneof(2);
    }

    public function hasStringType()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.StringType string_type = 2;</code>
     * @param \Schema\V1\Table\Column\StringType $var
     * @return $this
     */
    public function setStringType($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Column\StringType::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.FloatType float_type = 3;</code>
     * @return \Schema\V1\Table\Column\FloatType|null
     */
    public function getFloatType()
    {
        return $this->readOneof(3);
    }

    public function hasFloatType()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.FloatType float_type = 3;</code>
     * @param \Schema\V1\Table\Column\FloatType $var
     * @return $this
     */
    public function setFloatType($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Column\FloatType::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.BooleanType boolean_type = 4;</code>
     * @return \Schema\V1\Table\Column\BooleanType|null
     */
    public function getBooleanType()
    {
        return $this->readOneof(4);
    }

    public function hasBooleanType()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.BooleanType boolean_type = 4;</code>
     * @param \Schema\V1\Table\Column\BooleanType $var
     * @return $this
     */
    public function setBooleanType($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Column\BooleanType::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.DateType date_type = 5;</code>
     * @return \Schema\V1\Table\Column\DateType|null
     */
    public function getDateType()
    {
        return $this->readOneof(5);
    }

    public function hasDateType()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.DateType date_type = 5;</code>
     * @param \Schema\V1\Table\Column\DateType $var
     * @return $this
     */
    public function setDateType($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Column\DateType::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.FileType file_type = 6;</code>
     * @return \Schema\V1\Table\Column\FileType|null
     */
    public function getFileType()
    {
        return $this->readOneof(6);
    }

    public function hasFileType()
    {
        return $this->hasOneof(6);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.FileType file_type = 6;</code>
     * @param \Schema\V1\Table\Column\FileType $var
     * @return $this
     */
    public function setFileType($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Column\FileType::class);
        $this->writeOneof(6, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.EnumType enum_type = 7;</code>
     * @return \Schema\V1\Table\Column\EnumType|null
     */
    public function getEnumType()
    {
        return $this->readOneof(7);
    }

    public function hasEnumType()
    {
        return $this->hasOneof(7);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.EnumType enum_type = 7;</code>
     * @param \Schema\V1\Table\Column\EnumType $var
     * @return $this
     */
    public function setEnumType($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Column\EnumType::class);
        $this->writeOneof(7, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.CounterCacheType counter_cache_type = 8;</code>
     * @return \Schema\V1\Table\Column\CounterCacheType|null
     */
    public function getCounterCacheType()
    {
        return $this->readOneof(8);
    }

    public function hasCounterCacheType()
    {
        return $this->hasOneof(8);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.CounterCacheType counter_cache_type = 8;</code>
     * @param \Schema\V1\Table\Column\CounterCacheType $var
     * @return $this
     */
    public function setCounterCacheType($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Column\CounterCacheType::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.IDType id_type = 9;</code>
     * @return \Schema\V1\Table\Column\IDType|null
     */
    public function getIdType()
    {
        return $this->readOneof(9);
    }

    public function hasIdType()
    {
        return $this->hasOneof(9);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Column.IDType id_type = 9;</code>
     * @param \Schema\V1\Table\Column\IDType $var
     * @return $this
     */
    public function setIdType($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Column\IDType::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getTypes()
    {
        return $this->whichOneof("types");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ColumnType::class, \Schema\V1\Table_Column_ColumnType::class);

