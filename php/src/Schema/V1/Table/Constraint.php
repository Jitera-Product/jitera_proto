<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: v1/payloads.proto

namespace Schema\V1\Table;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>schema.v1.Table.Constraint</code>
 */
class Constraint extends \Google\Protobuf\Internal\Message
{
    protected $relation_key;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Schema\V1\Table\Constraint\PrimaryKey $primary_key
     *     @type \Schema\V1\Table\Constraint\ForeignKey $foreign_key
     *     @type \Schema\V1\Table\Constraint\NotNull $not_null
     *     @type \Schema\V1\Table\Constraint\Unique $unique
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\V1\Payloads::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Constraint.PrimaryKey primary_key = 1;</code>
     * @return \Schema\V1\Table\Constraint\PrimaryKey|null
     */
    public function getPrimaryKey()
    {
        return $this->readOneof(1);
    }

    public function hasPrimaryKey()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Constraint.PrimaryKey primary_key = 1;</code>
     * @param \Schema\V1\Table\Constraint\PrimaryKey $var
     * @return $this
     */
    public function setPrimaryKey($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Constraint\PrimaryKey::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Constraint.ForeignKey foreign_key = 2;</code>
     * @return \Schema\V1\Table\Constraint\ForeignKey|null
     */
    public function getForeignKey()
    {
        return $this->readOneof(2);
    }

    public function hasForeignKey()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Constraint.ForeignKey foreign_key = 2;</code>
     * @param \Schema\V1\Table\Constraint\ForeignKey $var
     * @return $this
     */
    public function setForeignKey($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Constraint\ForeignKey::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Constraint.NotNull not_null = 3;</code>
     * @return \Schema\V1\Table\Constraint\NotNull|null
     */
    public function getNotNull()
    {
        return $this->readOneof(3);
    }

    public function hasNotNull()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Constraint.NotNull not_null = 3;</code>
     * @param \Schema\V1\Table\Constraint\NotNull $var
     * @return $this
     */
    public function setNotNull($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Constraint\NotNull::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Constraint.Unique unique = 4;</code>
     * @return \Schema\V1\Table\Constraint\Unique|null
     */
    public function getUnique()
    {
        return $this->readOneof(4);
    }

    public function hasUnique()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Constraint.Unique unique = 4;</code>
     * @param \Schema\V1\Table\Constraint\Unique $var
     * @return $this
     */
    public function setUnique($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Constraint\Unique::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getRelationKey()
    {
        return $this->whichOneof("relation_key");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Constraint::class, \Schema\V1\Table_Constraint::class);

