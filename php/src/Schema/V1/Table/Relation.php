<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: payloads.proto

namespace Schema\V1\Table;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>schema.v1.Table.Relation</code>
 */
class Relation extends \Google\Protobuf\Internal\Message
{
    protected $relation_type;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Schema\V1\Table\Relation\RelationHasOne $has_one
     *     @type \Schema\V1\Table\Relation\RelationBelongTo $belong_to
     *     @type \Schema\V1\Table\Relation\RelationOneMany $one_many
     *     @type \Schema\V1\Table\Relation\RelationManyOne $many_one
     *     @type \Schema\V1\Table\Relation\RelationManyMany $many_many
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Payloads::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationHasOne has_one = 1;</code>
     * @return \Schema\V1\Table\Relation\RelationHasOne|null
     */
    public function getHasOne()
    {
        return $this->readOneof(1);
    }

    public function hasHasOne()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationHasOne has_one = 1;</code>
     * @param \Schema\V1\Table\Relation\RelationHasOne $var
     * @return $this
     */
    public function setHasOne($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Relation\RelationHasOne::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationBelongTo belong_to = 2;</code>
     * @return \Schema\V1\Table\Relation\RelationBelongTo|null
     */
    public function getBelongTo()
    {
        return $this->readOneof(2);
    }

    public function hasBelongTo()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationBelongTo belong_to = 2;</code>
     * @param \Schema\V1\Table\Relation\RelationBelongTo $var
     * @return $this
     */
    public function setBelongTo($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Relation\RelationBelongTo::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationOneMany one_many = 3;</code>
     * @return \Schema\V1\Table\Relation\RelationOneMany|null
     */
    public function getOneMany()
    {
        return $this->readOneof(3);
    }

    public function hasOneMany()
    {
        return $this->hasOneof(3);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationOneMany one_many = 3;</code>
     * @param \Schema\V1\Table\Relation\RelationOneMany $var
     * @return $this
     */
    public function setOneMany($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Relation\RelationOneMany::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationManyOne many_one = 4;</code>
     * @return \Schema\V1\Table\Relation\RelationManyOne|null
     */
    public function getManyOne()
    {
        return $this->readOneof(4);
    }

    public function hasManyOne()
    {
        return $this->hasOneof(4);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationManyOne many_one = 4;</code>
     * @param \Schema\V1\Table\Relation\RelationManyOne $var
     * @return $this
     */
    public function setManyOne($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Relation\RelationManyOne::class);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationManyMany many_many = 5;</code>
     * @return \Schema\V1\Table\Relation\RelationManyMany|null
     */
    public function getManyMany()
    {
        return $this->readOneof(5);
    }

    public function hasManyMany()
    {
        return $this->hasOneof(5);
    }

    /**
     * Generated from protobuf field <code>.schema.v1.Table.Relation.RelationManyMany many_many = 5;</code>
     * @param \Schema\V1\Table\Relation\RelationManyMany $var
     * @return $this
     */
    public function setManyMany($var)
    {
        GPBUtil::checkMessage($var, \Schema\V1\Table\Relation\RelationManyMany::class);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getRelationType()
    {
        return $this->whichOneof("relation_type");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Relation::class, \Schema\V1\Table_Relation::class);

